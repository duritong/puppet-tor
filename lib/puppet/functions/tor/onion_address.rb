# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'base32'
# ---- original file header ----
#
# @summary
#   Generates an onion address from a 1024-bit RSA private key.
#
#Example:
#
#  onion_address("-----BEGIN RSA PRIVATE KEY-----
#MII....
#-----END RSA PRIVATE KEY-----")
#
#Returns the onionadress for that key, *without* the .onion suffix.
#
#
Puppet::Functions.create_function(:'tor::onion_address') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    key = args.shift
    raise(Puppet::ParseError, "onion_address(): requires 1 argument") unless key && args.empty?
    private_key = key.is_a?(OpenSSL::PKey::RSA) ? key : OpenSSL::PKey::RSA.new(key)

    # the onion address are a base32 encoded string of the first half of the sha1 over the
    # der format of the public key
    # https://trac.torproject.org/projects/tor/wiki/doc/HiddenServiceNames#Howare.onionnamescreated
    # We can skip the first 22 bits of the der format as they are ignored by tor
    # https://timtaubert.de/blog/2014/11/using-the-webcrypto-api-to-generate-onion-names-for-tor-hidden-services/
    # https://gitweb.torproject.org/torspec.git/tree/rend-spec.txt#n525
    # Except for Ruby 1.8.7 where the first 22 are not present at all
    start = RUBY_VERSION.to_f < 1.9 ? 0 : 22
    public_key_der = private_key.public_key.to_der
    Base32.encode(Digest::SHA1.digest(public_key_der[start..-1]))[0..15].downcase
  
  end
end
